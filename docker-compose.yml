version: '2.23'
# TODO: Use init-env.sh to create a .env file with random credentials
services:
  # Shop's product database
  shop.app.catalog.db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: $MYSQL_ROOT_PASSWORD
      MYSQL_DATABASE: $MYSQL_DATABASE
    ports:
      - '3306:3306'
    networks:
      - app-private-network
    volumes:
      - './docker-support/shop.app.catalog.db/shop.db.init.schema.sql:/docker-entrypoint-initdb.d/1.sql'
      - './docker-support/shop.app.catalog.db/shop.db.init.data.sql:/docker-entrypoint-initdb.d/2.sql'

  # Users database
  shop.app.auth.db:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: $POSTGRES_USER
      POSTGRES_PASSWORD: $POSTGRES_PASSWORD
      POSTGRES_DB: $POSTGRES_DB
    ports:
      - 5431:5432
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready', '-U', 'admin']
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - shop.app.auth.db_volume:/var/lib/postgresql/data
    networks:
      - app-private-network

  # User authentication core
  shop.app.auth.core:
    image: registry.supertokens.io/supertokens/supertokens-postgresql
    depends_on:
      shop.app.auth.db:
        condition: service_healthy
    ports:
      - 3567:3567
    environment:
      POSTGRESQL_HOST: shop.app.auth.db
      POSTGRESQL_USER: $POSTGRES_USER
      POSTGRESQL_PASSWORD: $POSTGRES_PASSWORD
      POSTGRESQL_DATABASE_NAME: $POSTGRES_DB
      POSTGRESQL_PORT: $POSTGRESQL_PORT
    networks:
      - app-private-network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 20s
      timeout: 5s
      retries: 10

  # User authentication api
  shop.app.auth.api:
    build:
      context: ./apps/shop.app.auth.api
    ports:
      - '3003:3003'
    restart: on-failure
    networks:
      - app-private-network
      - app-public-network
    links:
      - shop.app.packages
    depends_on:
      shop.app.auth.core:
        condition: service_healthy
    environment:
      AUTH_CORE_DOMAIN: $AUTH_CORE_DOMAIN
      WEB_API_PORT: 3003
      WEB_API_DOMAIN: shop.app.auth.api
      PUBLIC_WEB_UI_DOMAIN: $PUBLIC_WEB_UI_DOMAIN # need external domain for cors
      API_USER_EMAIL: $API_USER_EMAIL
      API_USER_PASSWORD: $API_USER_PASSWORD

  # Shop cache service
  shop.app.cache:
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    networks:
      - app-private-network
    command: redis-server --save 20 1 --loglevel warning --requirepass $REDIS_PASSWORD
    volumes:
      - cache:/data

  # Shop message broker
  shop.app.messagebroker:
    build: ./docker-support/shop.app.messageBroker
    environment:
      - RABBITMQ_DEFAULT_USER=$RABBITMQ_DEFAULT_USER
      - RABBITMQ_DEFAULT_PASS=$RABBITMQ_DEFAULT_PASS
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - app-private-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Shop orders database
  shop.app.orders.db:
    image: mongo:latest
    command: mongod --bind_ip_all --replSet rs0
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      #test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      test: mongosh ./mongo-init.js
      interval: 5s
      timeout: 30s
      # below is not supported by docker-compose v2.3
      #start_period: 0s
      #start_interval: 1s
      retries: 30
    environment:
      MONGO_ROOT_USERNAME: $MONGO_INITDB_ROOT_USERNAME
      MONGO_ROOT_PASSWORD: $MONGO_INITDB_ROOT_PASSWORD
      MONGO_DB_USERNAME: $MONGO_DB_USERNAME
      MONGO_DB_PASSWORD: $MONGO_DB_PASSWORD
      MONGO_DB_READ_USERNAME: $MONGO_DB_READ_USERNAME
      MONGO_DB_READ_PASSWORD: $MONGO_DB_READ_PASSWORD
      MONGO_INITDB_DATABASE: $MONGO_INITDB_DATABASE
    ports:
      - '27017:27017'
    networks:
      - app-private-network
    volumes:
      - mongodb-data:/data/db
      - ./docker-support/shop.app.orders.db/mongo-init.js:/mongo-init.js:ro
      #- ./docker-support/shop.app.orders.db/replica.key:/data/replica.key.dev
      #- ./docker-support/shop.app.orders.db/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  # Shared packages
  shop.app.packages:
    image: shop.app.packages
    build:
      context: ./packages
    deploy:
      replicas: 0

  # Shop orders API
  shop.app.orders.api:
    build:
      context: ./apps/shop.app.orders.api
    ports:
      - '3001:3001'
    restart: on-failure
    networks:
      - app-private-network
      - app-public-network
    links:
      - shop.app.packages
    depends_on:
      shop.app.catalog.db:
        condition: service_started
      shop.app.cache:
        condition: service_started
      shop.app.orders.db:
        condition: service_healthy
      shop.app.messagebroker:
        condition: service_healthy
      shop.app.catalog.api:
        condition: service_started
    environment:
      AUTH_API_URL: $AUTH_API_URL_PRIVATE
      AUTH_CORE_DOMAIN: $AUTH_CORE_DOMAIN
      CATALOG_API_URL: http://shop.app.catalog.api:$CATALOG_API_PORT
      MESSAGE_BROKER_URL: $MESSAGE_BROKER_URL
      MONGO_DB_PASSWORD: $MONGO_DB_PASSWORD
      MONGO_DB_USERNAME: $MONGO_DB_USERNAME
      MONGODB_URL: $MONGODB_URL
      REDIS_HOST: $REDIS_HOST
      REDIS_PASSWORD: $REDIS_PASSWORD
      REDIS_PORT: $REDIS_PORT
      WEB_SERVER_PORT: 3001

  # Shop products API
  shop.app.catalog.api:
    build:
      context: ./apps/shop.app.catalog.api
    ports:
      - '5002:5002'
    restart: on-failure
    networks:
      - app-private-network
      - app-public-network
    depends_on:
      shop.app.catalog.db:
        condition: service_started
      shop.app.cache:
        condition: service_started
    environment:
      DB_HOST: $DB_HOST
      DB_USER: $DB_USER
      DB_PASSWORD: $DB_PASSWORD
      DB_DATABASE: $DB_DATABASE
      REDIS_HOST: $REDIS_HOST
      REDIS_PASSWORD: $REDIS_PASSWORD
      REDIS_PORT: $REDIS_PORT

  # Orders workflow processing workers

  # New orders processing - checking inventory availability
  shop.app.orders.pending.processing:
    build:
      context: ./apps/shop.app.orders.processing
    restart: on-failure
    networks:
      - app-private-network
    depends_on:
      shop.app.messagebroker:
        condition: service_healthy
      shop.app.orders.db:
        condition: service_healthy
    links:
      - shop.app.packages
    environment:
      MESSAGE_BROKER_URL: $MESSAGE_BROKER_URL
      WORKER_TYPE: pending
      MONGODB_URL: $MONGODB_URL
      MONGO_DB_USERNAME: $MONGO_DB_READ_USERNAME
      MONGO_DB_PASSWORD: $MONGO_DB_READ_PASSWORD
      AUTH_API_URL: $AUTH_API_URL_PRIVATE
      API_USER_EMAIL: $API_USER_EMAIL
      API_USER_PASSWORD: $API_USER_PASSWORD
      ORDERS_API_URL: $ORDERS_API_URL_PRIVATE

  # Payment processing
  shop.app.orders.payment.processing:
    build:
      context: ./apps/shop.app.orders.processing
    restart: on-failure
    networks:
      - app-private-network
    depends_on:
      shop.app.messagebroker:
        condition: service_healthy
      shop.app.orders.db:
        condition: service_healthy
    links:
      - shop.app.packages
    environment:
      MESSAGE_BROKER_URL: $MESSAGE_BROKER_URL
      WORKER_TYPE: payment
      MONGODB_URL: $MONGODB_URL
      MONGO_DB_USERNAME: $MONGO_DB_READ_USERNAME
      MONGO_DB_PASSWORD: $MONGO_DB_READ_PASSWORD
      AUTH_API_URL: $AUTH_API_URL_PRIVATE
      API_USER_EMAIL: $API_USER_EMAIL
      API_USER_PASSWORD: $API_USER_PASSWORD
      ORDERS_API_URL: $ORDERS_API_URL_PRIVATE

  # Order shipping
  shop.app.orders.dispatch.processing:
    build:
      context: ./apps/shop.app.orders.processing
    restart: on-failure
    networks:
      - app-private-network
    depends_on:
      shop.app.messagebroker:
        condition: service_healthy
      shop.app.orders.db:
        condition: service_healthy
    links:
      - shop.app.packages
    environment:
      MESSAGE_BROKER_URL: $MESSAGE_BROKER_URL
      WORKER_TYPE: dispatch
      MONGODB_URL: $MONGODB_URL
      MONGO_DB_USERNAME: $MONGO_DB_READ_USERNAME
      MONGO_DB_PASSWORD: $MONGO_DB_READ_PASSWORD
      AUTH_API_URL: $AUTH_API_URL_PRIVATE
      API_USER_EMAIL: $API_USER_EMAIL
      API_USER_PASSWORD: $API_USER_PASSWORD
      ORDERS_API_URL: $ORDERS_API_URL_PRIVATE

  # Main shop frontend
  shop.app.web:
    build:
      context: ./apps/shop.app.web
    ports:
      - '3000:80'
    networks:
      - app-public-network
    environment:
      REACT_APP_ORDERS_API_HOST: $ORDERS_API_HOST
      REACT_APP_CATALOG_API_URL: $CATALOG_API_URL
      REACT_APP_AUTH_API_URL: $AUTH_API_URL
    depends_on:
      - shop.app.orders.api
      - shop.app.catalog.api
      - shop.app.auth.api

volumes:
  cache:
    driver: local
  mongodb-data:
    driver: local
  shop.app.auth.db_volume:
    driver: local
  packages:
    driver: local
    driver_opts:
      type: 'none'
      o: 'bind'
      device: '/Users/artem.liman/git_nlok/nodejs_server_app/packages'

networks:
  app-private-network:
    driver: bridge
  app-public-network:
    driver: bridge
