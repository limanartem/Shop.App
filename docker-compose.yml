version: '2.23'
# TODO: Use init-env.sh to create a .env file with random credentials
services:

  # Shop's product database
  shop.app.catalog.db:
    image: mysql:latest
    environment:
      MYSQL_ROOT_PASSWORD: admin
      MYSQL_DATABASE: admin
    ports:
      - "3306:3306"
    networks:
      - app-private-network
    volumes:
      - "./shop.app.catalog.db/shop.db.init.schema.sql:/docker-entrypoint-initdb.d/1.sql"
      - "./shop.app.catalog.db/shop.db.init.data.sql:/docker-entrypoint-initdb.d/2.sql"  

  # Users database
  shop.app.auth.db:
    image: 'postgres:latest'
    environment:
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: qwerty123
      POSTGRES_DB: supertokens_db
    ports:
       - 5431:5432
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready", "-U", "admin"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - shop.app.auth.db_volume:/var/lib/postgresql/data
    networks:
      - app-private-network

  # User authentication core
  shop.app.auth.core:
    image: registry.supertokens.io/supertokens/supertokens-postgresql
    depends_on:
      shop.app.auth.db:
        condition: service_healthy
    # No need to expose ports
    ports:
       - 3567:3567
    # Use init-env.sh to create a .env file with random postgres credentials
    # environment:
    #   POSTGRESQL_CONNECTION_URI: "postgresql://supertokens_user:password@supertoken_db:5432/supertokens_db"
    environment:
      POSTGRESQL_HOST: shop.app.auth.db
      POSTGRESQL_USER: admin
      POSTGRESQL_PASSWORD: qwerty123
      POSTGRESQL_DATABASE_NAME: supertokens_db
      POSTGRESQL_PORT: 5432
    networks:
      - app-private-network
      - app-public-network
    restart: unless-stopped
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5

  # User authentication api
  shop.app.auth.api:
    build:
      context: ./shop.app.auth.api
    ports:
      - "3003:3003"
    restart: on-failure
    networks:
      - app-private-network
      - app-public-network
    depends_on:
      shop.app.auth.core:
        condition: service_healthy
    environment:
      AUTH_CORE_URL: shop.app.auth.core:3567
      WEB_API_PORT: 3003
      WEB_API_URL: shop.app.auth.api
      PUBLIC_WEB_UI_URL: localhost:3000 # need external domain for cors

  # Shop orders database
  shop.app.orders.db:
    image: mongo:latest
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootPassword
    ports:
      - '27017:27017'
    networks:
      - app-private-network
    volumes:
      - mongodb-data4:/data/db
      - ./mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro

  # Shop cache service
  shop.app.cache:
    image: redis:latest
    restart: always
    ports:
      - '6379:6379'
    networks:
      - app-private-network
    command: redis-server --save 20 1 --loglevel warning --requirepass qwerty123
    volumes: 
      - cache:/data

  # Shop message broker
  shop.app.messagebroker:
    build: ./shop.app.messageBroker
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=pass
    ports:
        - 5672
        - 15672
    networks:
        - app-private-network
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 30s
      timeout: 30s
      retries: 3

  # Shop orders API
  shop.app.orders.api:
    build:
      context: ./shop.app.orders.api
    ports:
      - "3001:3001"
    restart: on-failure
    networks:
      - app-private-network
      - app-public-network
    depends_on:
      shop.app.catalog.db:
        condition: service_started
      shop.app.cache:
        condition: service_started
      shop.app.orders.db:
        condition: service_started
      shop.app.messagebroker:
        condition: service_healthy
    environment:
      WEB_SERVER_PORT: 3001
      DB_HOST: mysql
      DB_USER: user1
      DB_PASSWORD: qwerty123
      DB_DATABASE: data
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: qwerty123
      MONGODB_URL: mongodb://shop.app.orders.db:27017/shop.app.orders.db
      MONGO_DB_USERNAME: ordersWriteUser
      MONGO_DB_PASSWORD: qwerty123
      MESSAGE_BROKER_URL: amqp://admin:pass@shop.app.messagebroker:5672

  # Shop products API
  shop.app.catalog.api:
    build:
      context: ./shop.app.catalog.api
    ports:
      - "5002:5002"
    restart: on-failure
    networks:
      - app-private-network
      - app-public-network
    depends_on:
      shop.app.catalog.db:
        condition: service_started
      shop.app.cache:
        condition: service_started
    environment:
      DB_HOST: shop.app.catalog.db
      DB_USER: catalogReader
      DB_PASSWORD: qwerty123
      DB_DATABASE: Catalog
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: qwerty123


  # Orders workflow processing workers

  # New orders processing - checking inventory availability
  shop.app.orders.pending.processing:
    build:
      context: ./shop.app.orders.processing
    restart: on-failure
    networks:
      - app-private-network
    depends_on:
      shop.app.messagebroker:
        condition: service_healthy
    environment:
      MESSAGE_BROKER_URL: amqp://admin:pass@shop.app.messagebroker:5672
      WORKER_TYPE: pending
      MONGODB_URL: mongodb://shop.app.orders.db:27017/shop.app.orders.db
      MONGO_DB_USERNAME: ordersWriteUser
      MONGO_DB_PASSWORD: qwerty123

  # Payment processing
  shop.app.orders.payment.processing:
    build:
      context: ./shop.app.orders.processing
    restart: on-failure
    networks:
      - app-private-network
    depends_on:
      shop.app.messagebroker:
        condition: service_healthy
    environment:
      MESSAGE_BROKER_URL: amqp://admin:pass@shop.app.messagebroker:5672
      WORKER_TYPE: payment

  # Order shipping
  shop.app.orders.dispatch.processing:
    build:
      context: ./shop.app.orders.processing
    restart: on-failure
    networks:
      - app-private-network
    depends_on:
      shop.app.messagebroker:
        condition: service_healthy
    environment:
      MESSAGE_BROKER_URL: amqp://admin:pass@shop.app.messagebroker:5672
      WORKER_TYPE: dispatch


  # Main shop frontend
  shop.app.web:
    build:
      context: ./shop.app.web
    ports:
      - "3000:80"
    networks:
      - app-public-network
    environment:
      REACT_APP_ORDERS_API_URL: http://localhost:3001
      REACT_APP_CATALOG_API_URL: http://localhost:5002
    depends_on:
      - shop.app.orders.api
      - shop.app.catalog.api

volumes:
 cache:
    driver: local
 mongodb-data4:
    driver: local
 shop.app.auth.db_volume:
    driver: local

networks:
  app-private-network:
    driver: bridge
  app-public-network:
    driver: bridge

  
